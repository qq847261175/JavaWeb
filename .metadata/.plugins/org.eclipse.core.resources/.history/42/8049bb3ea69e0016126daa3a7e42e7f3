package qq.zh.dao;

import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.Properties;

import javax.sql.DataSource;

import org.apache.commons.dbcp.BasicDataSourceFactory;
import org.apache.commons.dbutils.DbUtils;
import org.apache.commons.dbutils.QueryRunner;
import org.apache.commons.dbutils.ResultSetHandler;
import org.apache.commons.dbutils.handlers.BeanListHandler;

import qq.zh.domain.Course;
import qq.zh.domain.Student;

public class CourseDao3 {

	static private DataSource  source=null;
	static{
		BasicDataSourceFactory factory= new BasicDataSourceFactory();
		Properties properties=new Properties();
		try {
			properties.load(new FileReader("dbcp.properties"));
			source=factory.createDataSource(properties);
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	public List<Course> findSelectedCourseById(Student student) throws SQLException {
		QueryRunner qr = new QueryRunner(source);
		@SuppressWarnings("deprecation")
		List<Course> list=qr.query("select * from t_student_course ," +
				" t_course where  t_student_course.StudentId=? and" +
				" t_student_course.courseid=t_course.id", new BeanListHandler<Course>(Course.class), student.getId()
				);
		return list;
	}
	public List<Course> selectingCourseByStuId(Student stu) throws SQLException{
		QueryRunner qr = new QueryRunner(source);
		List<Course> list=qr.query("select c.* from t_course as c where not exists" +
				"( select 1 from " +
				"(select * from t_student_course , t_course as c" +
				" where  t_student_course.StudentId=? and t_student_course.courseid=c.id) as b" +
				"  where "+"c.name=b.name);",  new BeanListHandler<Course>(Course.class),stu.getId()
				);
		
		return list;
	}
	public boolean courseCheckIn(Student stu, String courseid) {
		List<Course> list=new ArrayList<Course>();
		QueryRunner qr=new QueryRunner(source);
		qr.update("insert into t_student_course (studentid,courseid) values(?,?);", param)
		return false;
	}
	
}
